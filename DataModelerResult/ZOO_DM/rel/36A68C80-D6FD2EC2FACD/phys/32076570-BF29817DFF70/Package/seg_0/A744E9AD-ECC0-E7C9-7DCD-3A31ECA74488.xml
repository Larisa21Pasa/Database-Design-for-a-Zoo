<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="animal_type_package" directorySegmentName="seg_0" id="A744E9AD-ECC0-E7C9-7DCD-3A31ECA74488">
<createdBy>adim</createdBy>
<createdTime>2024-04-25 13:36:08 UTC</createdTime>
<ownerDesignName>ZOO_DM</ownerDesignName>
<source>CREATE OR REPLACE PACKAGE animal_type_package AS
    PROCEDURE add_animal_type (
        p_type_animal IN animal_type.type_animal%TYPE
    );

    PROCEDURE delete_animal_type ( 
            p_type_animal IN animal_type.type_animal%TYPE
    );

    PROCEDURE update_animal_type (
         p_id_animal_type  IN animal_type.id_animal_type%TYPE,
            p_choice  IN VARCHAR2,
            p_updated IN VARCHAR2
    );

    PROCEDURE display_animal_type;

END animal_type_package;
/

CREATE OR REPLACE PACKAGE BODY animal_type_package AS

      ------------------------------ ADD -----------------------------------------------------
    PROCEDURE add_animal_type (
        p_type_animal IN animal_type.type_animal%TYPE
    ) IS
    BEGIN
        SAVEPOINT add_animal_type_savepoint;
        
        BEGIN
         -- CHECK IF NEW NAME IS NOT VALID
            IF p_type_animal IS NULL OR p_type_animal = &apos;&apos; THEN
                RAISE_APPLICATION_ERROR(-20001, &apos;Name type must not be empty.&apos;);
            END IF;
            
              -- INSERT VALUES IF IS VALID
            INSERT INTO animal_type (type_animal)
            VALUES (p_type_animal);
            
             -- COMMIT TRANSACTION INTO THE DB
            COMMIT;
            
        EXCEPTION
            WHEN dup_val_on_index THEN
                ROLLBACK TO add_animal_type_savepoint;
                RAISE_APPLICATION_ERROR(-20001, &apos;An animal type with the same name already exists.&apos;);
                
            WHEN OTHERS THEN
                ROLLBACK TO add_animal_type_savepoint;
                RAISE_APPLICATION_ERROR(-20002, &apos;Error when trying to add animal type to db &apos; || SQLERRM);
        END;
    END add_animal_type;

    ------------------------------ DELETE -----------------------------------------------------    
     PROCEDURE delete_animal_type (
            p_type_animal IN animal_type.type_animal%TYPE
        ) IS
             v_count NUMBER;
        BEGIN
            SAVEPOINT delete_type_savepoint;
            BEGIN
                -- CHECK IF NAME IS VALID
                IF p_type_animal IS NULL OR p_type_animal = &apos;&apos; THEN
                    RAISE_APPLICATION_ERROR(-20003, &apos;Name type must not be empty.&apos;);
                END IF;
                
                -- CHECK IF NAME EXISTS IN DB
                SELECT COUNT(*)
                INTO   v_count
                FROM   animal_type
                WHERE  type_animal = p_type_animal;
    
                 -- IF NOT, RAISE EXCEPTION
                IF v_count = 0 THEN
                    RAISE_APPLICATION_ERROR(-20004, &apos;You are trying to delete an invalid animal ID type.&apos;);
                END IF;
            
                -- PROPER DELETE OF ANIMAL ( type_animal IS UNIQUE FIELD )
                DELETE FROM animal_type
                WHERE type_animal = p_type_animal;
                
                 -- CHECK FOR SUCCESSFUL DELETE OPERATION
                IF SQL%NOTFOUND THEN
                    ROLLBACK TO delete_type_savepoint;
                    RAISE_APPLICATION_ERROR(-20005, &apos;Animal with type &apos; || p_type_animal || &apos; not found.&apos;);
                END IF;
    
                COMMIT;  -- COMMIT TRANSACTION
            EXCEPTION
                WHEN OTHERS THEN -- GENERAL ERROR IF SOMETHING APPEAR
                    ROLLBACK TO delete_type_savepoint;
                    RAISE_APPLICATION_ERROR(-20002, &apos;Error in deleting typeanimal: &apos; || SQLERRM);
                    
            END;
        END delete_animal_type;

    ------------------------------ UPDATE -----------------------------------------------------
       PROCEDURE update_animal_type (
            p_id_animal_type  IN animal_type.id_animal_type%TYPE,
            p_choice  IN VARCHAR2,
            p_updated IN VARCHAR2
        ) IS
            e_bad_choice EXCEPTION;
            e_no_rows EXCEPTION;
        BEGIN
            SAVEPOINT update_animal_type_savepoint;
            BEGIN
                -- CHECK IF CHOISE IS ONE OF ATTRIBUTE OF TABLE
                IF p_choice = &apos;type_animal&apos; THEN
                
                    -- IF ATTRIBUTE IS VALID, CHECK IF NEW VALUE IS ALSO VALID
                    IF p_updated IS NULL THEN
                          RAISE_APPLICATION_ERROR(-20010, &apos;New value must not be null.&apos;);
                    END IF;
                    
                    -- IF IT IS, THEN UPDATE TABLE AND THEN CHECK IF ACTION TOOK PLACE
                    UPDATE animal_type SET type_animal = p_updated WHERE id_animal_type = p_id_animal_type;
                    
                    IF SQL%NOTFOUND THEN
                        RAISE e_no_rows;
                    END IF;
                    
                ELSE
                    RAISE e_bad_choice;
                END IF;
                
                COMMIT;
            
            EXCEPTION
                WHEN e_bad_choice THEN
                    RAISE_APPLICATION_ERROR(-20201, &apos;No attribute like &apos; || p_choice || &apos; found !&apos;);
                    
                WHEN DUP_VAL_ON_INDEX THEN 
                    RAISE_APPLICATION_ERROR(-20001, &apos;A type with the same name already exists.&apos;);
                    
                WHEN e_no_rows THEN  
                    RAISE_APPLICATION_ERROR(-20202, &apos;Type with ID&apos; || TO_CHAR(p_id_animal_type) || &apos; does not exist.&apos;);
                    
                WHEN OTHERS THEN
                    RAISE_APPLICATION_ERROR(-20002, &apos;Error in updating pen: &apos; || TO_CHAR(p_id_animal_type) || &apos;: &apos; || SQLERRM);
            END;
        END update_animal_type;
        
    

        PROCEDURE display_animal_type IS
        BEGIN
            FOR rec IN (SELECT * FROM animal_type) LOOP
                DBMS_OUTPUT.PUT_LINE(&apos;ID: &apos; || rec.id_animal_type || &apos;, Type: &apos; || rec.type_animal);
            END LOOP;
        END display_animal_type;

END animal_type_package;</source>
</PackageOracle>
