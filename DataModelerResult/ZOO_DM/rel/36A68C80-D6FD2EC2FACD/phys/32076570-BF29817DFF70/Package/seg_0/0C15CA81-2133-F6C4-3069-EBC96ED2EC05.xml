<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="animal_pen_package" directorySegmentName="seg_0" id="0C15CA81-2133-F6C4-3069-EBC96ED2EC05">
<createdBy>adim</createdBy>
<createdTime>2024-04-25 13:21:27 UTC</createdTime>
<ownerDesignName>ZOO_DM</ownerDesignName>
<source>CREATE OR REPLACE PACKAGE animal_pen_package AS
    PROCEDURE add_animal_pen (
        p_name_pen IN animal_pen.name_pen%TYPE
    );

    PROCEDURE delete_animal_pen (
         p_name_pen IN animal_pen.name_pen%TYPE
    );

    PROCEDURE update_animal_pen (
            p_id_animal_pen  IN animal_pen.id_animal_pen%TYPE,
            p_choice  IN VARCHAR2,
            p_updated IN VARCHAR2
    );

    PROCEDURE display_animal_pen;

END animal_pen_package;
/


CREATE OR REPLACE PACKAGE BODY animal_pen_package AS

   ------------------------------ ADD -----------------------------------------------------
    PROCEDURE add_animal_pen (
        p_name_pen IN animal_pen.name_pen%TYPE
    ) IS
    
    BEGIN
        SAVEPOINT add_animal_pen_savepoint; -- SAVEPOINT FOR ROLLBACK IN CASE SMTH IS WRONG
        
        BEGIN
           
            -- CHECK IF NEW NAME IS NOT VALID
            IF p_name_pen IS NULL OR p_name_pen = &apos;&apos; THEN
                RAISE_APPLICATION_ERROR(-20001, &apos;Name pen must not be empty or null.&apos;);
            END IF;
          
            -- INSERT VALUES IF IS VALID
            INSERT INTO animal_pen (name_pen)
            VALUES (p_name_pen);
            
            -- COMMIT TRANSACTION INTO THE DB
            COMMIT;
            
        EXCEPTION
            WHEN dup_val_on_index THEN
                ROLLBACK TO add_animal_pen_savepoint;
                RAISE_APPLICATION_ERROR(-20001, &apos;A pen with the same name already exists.&apos;);
                
            WHEN OTHERS THEN
                ROLLBACK TO add_animal_pen_savepoint;
                RAISE_APPLICATION_ERROR(-20002, &apos;Error when trying to add animal pen to db &apos; || SQLERRM);
        END;
    END add_animal_pen;
    
    
    
    ------------------------------ DELETE -----------------------------------------------------
     PROCEDURE delete_animal_pen (
            p_name_pen IN animal_pen.name_pen%TYPE
        ) IS
            v_count NUMBER;
        BEGIN
            SAVEPOINT delete_pen_savepoint; -- SAVEPOINT FOR ROLLBACK IN CASE SMTH IS WRONG
            BEGIN
                        
                -- CHECK IF NAME IS VALID
                IF p_name_pen IS NULL OR p_name_pen = &apos;&apos; THEN
                    RAISE_APPLICATION_ERROR(-20003, &apos;Name pen must not be empty.&apos;);
                END IF;
                
                -- CHECK IF NAME EXISTS IN DB 
                SELECT COUNT(*)
                INTO   v_count
                FROM   animal_pen
                WHERE  name_pen = p_name_pen;
    
                -- IF NOT, RAISE EXCEPTION
                IF v_count = 0 THEN
                    RAISE_APPLICATION_ERROR(-20004, &apos;You are trying to delete an invalid animal ID pen.&apos;);
                END IF;
            
            
                -- PROPER DELETE OF ANIMAL ( NAME_PEN IS UNIQUE FIELD )
                DELETE FROM animal_pen
                WHERE name_pen = p_name_pen;
                
                -- CHECK FOR SUCCESSFUL DELETE OPERATION
                IF SQL%NOTFOUND THEN
                    ROLLBACK TO delete_pen_savepoint;
                    RAISE_APPLICATION_ERROR(-20005, &apos;Pen with name &apos; || p_name_pen || &apos; has not been deleted.&apos;);
                END IF;
    
                COMMIT; -- COMMIT TRANSACTION
            EXCEPTION
                WHEN OTHERS THEN -- GENERAL ERROR IF SOMETHING APPEAR
                    ROLLBACK TO delete_pen_savepoint;
                    RAISE_APPLICATION_ERROR(-20002, &apos;Error in deleting pen: &apos; || SQLERRM);
            END;
        END delete_animal_pen;

    ------------------------------ UPDATE -----------------------------------------------------

       PROCEDURE update_animal_pen (
            p_id_animal_pen  IN animal_pen.id_animal_pen%TYPE,
            p_choice  IN VARCHAR2,
            p_updated IN VARCHAR2
        ) IS

            -- DECLARE CUSTOM EXCEPTIONS
            e_bad_choice EXCEPTION;
            e_no_rows EXCEPTION;
        BEGIN
            SAVEPOINT update_animal_pen_savepoint;
            BEGIN
                -- CHECK IF CHOISE IS ONE OF ATTRIBUTE OF TABLE
                IF p_choice = &apos;name_pen&apos; THEN
                    
                    -- IF ATTRIBUTE IS VALID, CHECK IF NEW VALUE IS ALSO VALID
                    IF p_updated IS NULL THEN
                          RAISE_APPLICATION_ERROR(-20010, &apos;New value must not be null.&apos;);
                    END IF;
                    
                    -- IF IT IS, THEN UPDATE TABLE AND THEN CHECK IF ACTION TOOK PLACE
                    UPDATE animal_pen SET name_pen = p_updated WHERE id_animal_pen = p_id_animal_pen;
                    
                    IF SQL%NOTFOUND THEN
                        RAISE e_no_rows;
                    END IF;
                    
                ELSE
                    RAISE e_bad_choice;
                END IF;
                
                COMMIT;
            
            EXCEPTION
                WHEN e_bad_choice THEN
                    RAISE_APPLICATION_ERROR(-20201, &apos;No attribute like &apos; || p_choice || &apos; found !&apos;);
                    
                WHEN dup_val_on_index THEN 
                    RAISE_APPLICATION_ERROR(-20001, &apos;A pen with the same name already exists.&apos;);
                    
                WHEN e_no_rows THEN  
                    RAISE_APPLICATION_ERROR(-20202, &apos;Pen with ID&apos; || TO_CHAR(p_id_animal_pen) || &apos; does not exist.&apos;);
                    
                WHEN OTHERS THEN
                    RAISE_APPLICATION_ERROR(-20002, &apos;Error in updating pen: &apos; || TO_CHAR(p_id_animal_pen) || &apos;: &apos; || SQLERRM);
            END;
        END update_animal_pen;
        
    

        PROCEDURE display_animal_pen IS
        BEGIN
            FOR rec IN (SELECT * FROM animal_pen) LOOP
                DBMS_OUTPUT.PUT_LINE(&apos;ID: &apos; || rec.id_animal_pen || &apos;, Name: &apos; || rec.name_pen);
            END LOOP;
        END display_animal_pen;

END animal_pen_package;</source>
</PackageOracle>
